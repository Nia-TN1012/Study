<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
					xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
					mc:Ignorable="d">

	<!-- リソースディクショナリーを使って、コントロールの外観のカスタマイズを定義することができます。
		◆ 定義側
		<Style x:Key="リソースディクショナリーに登録するキー（一意的な文字列にする必要があります。）"
			   TargetType="{x:Type 外観をカスタマイズするコントロールの名前}">
			<Setter Property="" Value=""/>
			...
		</Style>
	
		◆ 利用側
		<コントロール Style="{StaticResource 定義側登録したスタイルのキー}" ... />
	-->
	
	<!-- Windowの背景色 -->
	<!-- SolidColorBrush はコントロールの色を表します。 ColorにはHTMLの色コードもしくはBrushesクラスで定義されている色を設定します -->
	<SolidColorBrush x:Key="MainWindowBackgroundKey" Color="#FFF"/>
	<!-- Windowの前景色 -->
	<SolidColorBrush x:Key="MainWindowForegroundKey" Color="#111"/>
	<!-- Windowの枠色 -->
	<SolidColorBrush x:Key="MainWindowBorderBrushKey" Color="#FF80C0FF"/>
	
	<!-- キャプションボタンのテキストの色 -->
	<SolidColorBrush x:Key="CaptionButtonForegroundKey" Color="Gray"/>
	<!-- ステータスバーのテキストの色 -->
	<SolidColorBrush x:Key="StatusBarTextForegroundKey" Color="White"/>

	<!-- アクセントカラー -->
	<SolidColorBrush x:Key="AccentColorKey" Color="#FF2464FF"/>

	<!-- 普通 -->
	<!-- コントロールの背景色 -->
	<SolidColorBrush x:Key="CustomNormalBrushKey" Color="#EEE"/>
	<!-- コントロールの枠色 -->
	<SolidColorBrush x:Key="CustomNormalBorderBrushKey" Color="#888"/>

	<!-- 明るめ -->
	<!-- コントロールの背景色 -->
	<SolidColorBrush x:Key="CustomLightBrushKey" Color="#FFF"/>
	<!-- コントロールの枠色 -->
	<SolidColorBrush x:Key="CustomNormalLightBrushKey" Color="#CCC"/>

	<!-- マウスオーバー時 -->
	<!-- バッググラウンド用 -->
	<SolidColorBrush x:Key="CustomMouseOverBrushKey" Color="SkyBlue"/>

	<!-- マウスクリック時 -->
	<!-- コントロールの背景色 -->
	<SolidColorBrush x:Key="CustomPressedBrushKey" Color="#80006080"/>
	<!-- コントロールの枠色 -->
	<SolidColorBrush x:Key="CustomPressedBorderBrushKey" Color="#666"/>

	<!-- コントロールが無効の時 -->
	<!-- コントロールの背景色 -->
	<SolidColorBrush x:Key="CustomDisabledBackgroundBrushKey" Color="#EEE"/>
	<!-- コントロールの前景色 -->
	<SolidColorBrush x:Key="CustomDisabledForegroundBrushKey" Color="#24000000"/>
	<!-- コントロールの枠色 -->
	<SolidColorBrush x:Key="CustomDisabledBorderBrushKey" Color="#24000000"/>

	<!-- 項目の選択時 -->
	<!-- 項目の背景色 -->
	<SolidColorBrush x:Key="CustomSelectedBackgroundBrushKey" Color="LightBlue"/>
	<!-- コントロールの枠色 -->
	<SolidColorBrush x:Key="CustomSelectedBorderBrushKey" Color="DodgerBlue"/>

	<!-- DefaultedBorderBrush は KeyBoardFocus の表示に使用されます -->
	<SolidColorBrush x:Key="CustomDefaultedBorderBrushKey" Color="#333"/>

	<SolidColorBrush x:Key="CustomSolidBorderBrushKey" Color="#888"/>
	<SolidColorBrush x:Key="CustomLightBorderBrushKey" Color="#AAA"/>
	<SolidColorBrush x:Key="CustomLightColorBrushKey" Color="#DDD"/>

	<!-- ラジオボタン、チェックボックスのマーク、トグルボタンなどの字形の色 -->
	<SolidColorBrush x:Key="GlyphBrushKey" Color="#444"/>

	<!-- ScrollViewer、TreeView、ListBox、Expander、TextBox、Tab Control のコンテンツの背景に使用されます -->
	<!-- アイテムコントロールとの背景色 -->
	<SolidColorBrush x:Key="WindowBackgroundBrushKey" Color="#FFF"/>

	<!-- コントロールのフォーカスのテンプレート -->
	<ControlTemplate x:Key="CustomControlFocusVisualKey">
		<!-- LawnGreen色の枠線 -->
		<Border>
			<Rectangle Margin="0" Stroke="DodgerBlue" StrokeThickness="1"/>
		</Border>
	</ControlTemplate>

	<!-- コントロール周辺のキーボードフォーカスの表示 : FocusVisualStyleプロパティで使用します。 -->
	<Style x:Key="CustomItemFocusVisualKey">
		<!-- 先ほど定義したフォーカスのテンプレートを設定します。 -->
		<Setter Property="Control.Template" Value="{DynamicResource CustomControlFocusVisualKey}"/>
	</Style>

	<!-- ボタン用 -->
	<Style x:Key="CustomButtonKey" TargetType="{x:Type Button}" BasedOn="{x:Null}">
		<Setter Property="FocusVisualStyle" Value="{DynamicResource CustomItemFocusVisualKey}"/>
		<Setter Property="Background" Value="{DynamicResource CustomNormalBrushKey}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource CustomNormalBorderBrushKey}"/>
		<Setter Property="Template">
			<Setter.Value>
				<!-- ボタンの外観を構成します。 -->
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid x:Name="Grid">
						<!-- {TemplateBinding プロパティ名} はStyleを利用する側から設定した値にバインディングすることを表します。 -->
						<Border x:Name="Border"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								Padding="{TemplateBinding Padding}"/>

						<!-- ContentPresenterはボタンの中のコンテンツ（テキスト）などを表すコントロールです。 -->
						<ContentPresenter Margin="{TemplateBinding Padding}"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										  RecognizesAccessKey="True"/>
					</Grid>

					<!-- ControlTemplate.Triggersはコントロールの状態によって、スタイルの一部を変化させます。 -->
					<ControlTemplate.Triggers>
						<!-- マウスでのクリックやキーボードなどによってボタンがフォーカスしている時 -->
						<Trigger Property="IsKeyboardFocused" Value="true">
							<!-- 枠線の色を変更します。 -->
							<Setter Property="BorderBrush" Value="{DynamicResource AccentColorKey}" TargetName="Border"/>
						</Trigger>
						<!-- マウスカーソルがボタンの上にいる時（ マウスオーバー ） -->
						<Trigger Property="IsMouseOver" Value="true">
							<!-- 背景色を変更します。 -->
							<Setter Property="Background" Value="{DynamicResource CustomMouseOverBrushKey}" TargetName="Border"/>
						</Trigger>
						<!-- ボタンがクリックされた（ 押された ）時 -->
						<Trigger Property="IsPressed" Value="true">
							<!-- 背景色を変更します。 -->
							<Setter Property="Background" Value="{DynamicResource CustomPressedBrushKey}" TargetName="Border"/>
						</Trigger>
						<!-- ボタンが無効の時 -->
						<Trigger Property="IsEnabled" Value="false">
							<!-- 背景色と前景色を薄い色に変更します。 -->
							<Setter Property="Foreground" Value="{DynamicResource CustomDisabledForegroundBrushKey}"/>
							<Setter Property="BorderBrush" Value="{DynamicResource CustomDisabledBorderBrushKey}" TargetName="Border"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- タイトルバーに設置するボタン（キャプションボタン）用 -->
	<!-- カスタムキャプションボタン -->
	<Style x:Key="CustomCaptionButtonKey" TargetType="{x:Type Button}">
		<!-- キャプションボタンは枠線とフォーカス用枠線を非表示にします -->
		<Setter Property="BorderBrush" Value="{x:Null}"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<!-- Marlettフォント -->
		<!-- 最小化：0 / 最大化：1 / リサイズ：2 / 閉じる：r -->
		<Setter Property="FontFamily" Value="Marlett"/>
		<!-- タブキーによるフォーカスを無効にします -->
		<Setter Property="IsTabStop" Value="False"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<!-- 非クライアント領域に置いた時でもヒットテストを有効にします -->
		<Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid x:Name="Grid">
						<Border x:Name="Border" 
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								Padding="{TemplateBinding Padding}"/>

						<ContentPresenter HorizontalAlignment="Center"
										  Margin="{TemplateBinding Padding}"
										  VerticalAlignment="Center"
										  FocusVisualStyle="{x:Null}"
										  RecognizesAccessKey="False"/>
					</Grid>

					<ControlTemplate.Triggers>
						<!-- マウスオーバー時、背景色を少し暗くします -->
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="#16000000" TargetName="Border"/>
						</Trigger>
						<!-- ボタンをクリックした時、背景色を暗くします -->
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" Value="#40000000" TargetName="Border"/>
						</Trigger>
						<!-- コントロールが有効の時 -->
						<Trigger Property="IsEnabled" Value="true"/>
						<!-- コントロールが無効の時、文字色を薄くします -->
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="#40000000"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="CustomButton2Key" TargetType="{x:Type Button}">
		<Setter Property="FocusVisualStyle" Value="{DynamicResource CustomItemFocusVisualKey}"/>
		<Setter Property="BorderBrush" Value="{x:Null}"/>
		<Setter Property="FontFamily" Value="Marlett"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid x:Name="Grid">
						<Border x:Name="Border" 
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								Padding="{TemplateBinding Padding}"/>

						<ContentPresenter HorizontalAlignment="Center"
										  Margin="{TemplateBinding Padding}"
										  VerticalAlignment="Center"
										  FocusVisualStyle="{x:Null}"
										  RecognizesAccessKey="False"/>
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter Property="BorderBrush" Value="{DynamicResource AccentColorKey}" TargetName="Border"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="{DynamicResource CustomMouseOverBrushKey}" TargetName="Border"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" Value="{DynamicResource CustomPressedBrushKey}" TargetName="Border"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="#40000000"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- スクロールバーのリピートボタン用 -->
	<Style x:Key="CustomRepeatButtonKey" d:IsControlPart="True" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
		<Setter Property="Background" Value="{StaticResource CustomNormalBrushKey}"/>
		<Setter Property="BorderBrush" Value="{StaticResource CustomNormalBorderBrushKey}"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource CustomItemFocusVisualKey}"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Grid>
						<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
						<ContentPresenter x:Name="ContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center"
										  Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter Property="BorderBrush" Value="{StaticResource CustomDefaultedBorderBrushKey}" TargetName="Border"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="{StaticResource CustomMouseOverBrushKey}" TargetName="Border"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" Value="{StaticResource CustomPressedBrushKey}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{StaticResource CustomPressedBorderBrushKey}" TargetName="Border"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="{StaticResource CustomDisabledBackgroundBrushKey}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{StaticResource CustomDisabledBorderBrushKey}" TargetName="Border"/>
							<Setter Property="Foreground" Value="{StaticResource CustomDisabledForegroundBrushKey}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- スクロールバーのつまみ用 -->
	<Style x:Key="CustomThumbKey" d:IsControlPart="True" TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Grid Margin="0" x:Name="Grid">
						<Rectangle HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto"
								   Fill="{DynamicResource CustomNormalBrushKey}" Stroke="{DynamicResource CustomNormalBorderBrushKey}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsFocused" Value="True"/>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Fill" Value="{StaticResource CustomMouseOverBrushKey}" TargetName="Rectangle"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False"/>
						<Trigger Property="IsDragging" Value="True">
							<Setter Property="Fill" Value="{StaticResource CustomPressedBrushKey}" TargetName="Rectangle"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- スクロールバーのTrack部分に設置するリピートボタン用 -->
	<Style x:Key="CustomScrollRepeatButtonKey" d:IsControlPart="True" TargetType="{x:Type RepeatButton}">
		<!-- 色は透明に設定します。 -->
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="IsTabStop" Value="false"/>
		<Setter Property="Focusable" Value="false"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Grid>
						<Rectangle Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}"/>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- スクロールバー用 -->
	<Style x:Key="CustomScrollBarKey" TargetType="{x:Type ScrollBar}">
		<Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollBar}">
					<Grid x:Name="GridRoot" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Background="{TemplateBinding Background}">
						<Grid.RowDefinitions>
							<RowDefinition MaxHeight="18"/>
							<RowDefinition Height="0.00001*"/>
							<RowDefinition MaxHeight="18"/>
						</Grid.RowDefinitions>

						<!-- △ : 上方向にスクロールするボタンです。 -->
						<RepeatButton x:Name="DecreaseRepeat" Style="{DynamicResource CustomRepeatButtonKey}" Command="ScrollBar.LineUpCommand">
							<Grid>
								<!-- Path.Dataにある構文の意味（ xとyには座標の数値（ double型 ）が入ります。 ） : 
									
									 "M x y" は新しい図形の始点の座標 ( x, y ) を表します。
									 "H x"   は前の点から ( x, 前の点のY座標 ) の位置に横線を引くことを表します。
									 "V y"   は前の点から ( 前の点のX座標, y ) の位置に縦線を引くことを表します。
									 "L x y" は前の点から ( x, y ) の位置に直線を引くことを表します。
								
									　"Z" は前の点から始点の座標に線を引くことを表します（閉じた図形を作成する時に使用します）。
									　　　　Fillプロパティは閉じた図形のみ有効です（閉じていない図形に設定しても何も起こりません）。
										
									 DecreaseArrowの場合（ "M 0 4 H 8 L 4 0 Z" ）、
									 　① ( 0, 4 )を図形の始点にする
									 　② ( 0, 4 )と( 8, 4 )の間に横線を引く
									 　③ ( 8, 4 )と( 4, 0 )の間に直線を引く
									 　④ ( 4, 0 )と( 0, 4 )の間に直線を引き、閉じた図形にする
									 ことを意味します。すなわち、
									　( 0, 4 ), ( 8, 4 ), ( 4, 0 )の3点からなる閉じた図形（ △ ）を描画します。
								
									 参考 : パス マークアップ構文 | MSDN
										  （ https://msdn.microsoft.com/ja-jp/library/ms752293.aspx ）
								-->
								<Path x:Name="DecreaseArrow" Stroke="{TemplateBinding Foreground}"
									  Fill="{TemplateBinding Foreground}" StrokeThickness="1"
									  Data="M 0 4 H 8 L 4 0 Z"/>
							</Grid>
						</RepeatButton>

						<!-- Track は両端をジャンプしてスクロールする Thumb と Repeat Button のサイズを変更する特殊なレイアウト コンテナーです -->
						<Track Grid.Row="1" x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="true">
							<Track.Thumb>
								<Thumb Style="{DynamicResource CustomThumbKey}"/>
							</Track.Thumb>
							<Track.IncreaseRepeatButton>
								<RepeatButton x:Name="PageUp" Style="{DynamicResource CustomScrollRepeatButtonKey}" Command="ScrollBar.PageDownCommand"/>
							</Track.IncreaseRepeatButton>
							<Track.DecreaseRepeatButton>
								<RepeatButton x:Name="PageDown" Style="{DynamicResource CustomScrollRepeatButtonKey}" Command="ScrollBar.PageUpCommand"/>
							</Track.DecreaseRepeatButton>
						</Track>

						<!-- ▽ : 下方向にスクロールするボタンです。 -->
						<RepeatButton Grid.Row="2" x:Name="IncreaseRepeat" Style="{DynamicResource CustomRepeatButtonKey}" Command="ScrollBar.LineDownCommand">
							<Grid>
								<Path x:Name="IncreaseArrow" Stroke="{TemplateBinding Foreground}"
									  Fill="{TemplateBinding Foreground}" StrokeThickness="1"
									  Data="M 0 0 H 8 L 4 4 Z"/>
							</Grid>
						</RepeatButton>
					</Grid>

					<!-- これは ScrollBar の単一のテンプレートを使用し、これを水平方向に回転します
						上下のコマンドの代わりに左右のコマンドを実行するように、コマンドの変更も行います -->
					<ControlTemplate.Triggers>
						<Trigger Property="Orientation" Value="Horizontal">

							<!-- ScrollBar を垂直から水平に回転します -->
							<Setter Property="LayoutTransform" TargetName="GridRoot">
								<Setter.Value>
									<RotateTransform Angle="-90"/>
								</Setter.Value>
							</Setter>

							<!-- Track は内部で Orientation にバインドされているため、回転して垂直に戻す必要があります -->
							<Setter TargetName="PART_Track" Property="Orientation" Value="Vertical"/>

							<!-- 水平のコマンドを実行するようにコマンドを変更します -->
							<Setter Property="Command" Value="ScrollBar.LineLeftCommand" TargetName="DecreaseRepeat"/>
							<Setter Property="Command" Value="ScrollBar.LineRightCommand" TargetName="IncreaseRepeat"/>
							<Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageDown"/>
							<Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageUp"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- グリッドビューアー用 : グリッドビューアーとは、スクロールバーでスクロールできるコンテンツのコンテナのコントロールです。 -->
	<Style x:Key="CustomScrollViewerKey" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollViewer}">
					<Grid Background="{TemplateBinding Background}">
						<!-- 上からコンテンツ、スクロールバー用に分割します。 -->
						<Grid.RowDefinitions>
							<RowDefinition Height="*"/>
							<RowDefinition Height="Auto"/>
						</Grid.RowDefinitions>
						<!-- 左からコンテンツ、スクロールバー用に分割します。 -->
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="Auto"/>
						</Grid.ColumnDefinitions>

						<!-- コンテンツ表示部 -->
						<ScrollContentPresenter Grid.Row="0" Grid.Column="0" 
												Margin="{TemplateBinding Padding}"
												Content="{TemplateBinding Content}"
												ContentTemplate="{TemplateBinding ContentTemplate}"
												CanContentScroll="{TemplateBinding CanContentScroll}"/>

						<!-- スクロールバー（ 水平方向 ） -->
						<ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Row="1" Grid.Column="0" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" 
								   Style="{StaticResource CustomScrollBarKey}" Orientation="Horizontal" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
								   ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" />
						<!-- スクロールバー（ 垂直方向 ） -->
						<ScrollBar x:Name="PART_VerticalScrollBar" Grid.Row="0" Grid.Column="1" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
								   Style="{StaticResource CustomScrollBarKey}" Orientation="Vertical" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
								   ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- リストボックス用 -->
	<Style x:Key="CustomListBoxKey" TargetType="{x:Type ListBox}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBox}">
					<Grid>
						<Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
						<ScrollViewer Margin="1" Style="{DynamicResource CustomScrollViewerKey}" Focusable="false" Background="{TemplateBinding Background}">
							<!-- StackPanel  は IsItemsHost を True に設定することで子の表示に使用されます -->
							<StackPanel Margin="2" IsItemsHost="true" />
						</ScrollViewer>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="{DynamicResource CustomDisabledBackgroundBrushKey}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{DynamicResource CustomDisabledBorderBrushKey}" TargetName="Border"/>
						</Trigger>
						<!--  -->
						<Trigger Property="IsGrouping" Value="true">
							<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ListBoxに使用する時は、ListBox.ResourcesのStyle（ TargetType={x:Type ListBoxItem} ）でオーバーライドします。
		 
		<ListBox Style="{StaticResource CustomListBoxKey}">
			<ListBox.Resources>
				<Style TargetType="ListBoxItem" BasedOn="{StaticResource CustomListBoxItemKey}"/>
			</ListBox.Resources>
		</ListBox>
	-->
	<!-- リストボックスの項目用 -->
	<Style x:Key="CustomListBoxItemKey" d:IsControlPart="True" TargetType="{x:Type ListBoxItem}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBoxItem}">
					<Grid SnapsToDevicePixels="true">
						<Border x:Name="Border" Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"/>
						<ContentPresenter HorizontalAlignment="Stretch"
										  VerticalAlignment="Stretch"
										  Margin="4"/>
					</Grid>
					<ControlTemplate.Triggers>

						<!-- IsSelected の SelectedBackgroundBrush を変更してアイテムの選択の色を設定します -->
						<Trigger Property="IsSelected" Value="true">
							<Setter Property="Background" Value="{DynamicResource CustomSelectedBackgroundBrushKey}" TargetName="Border"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="{DynamicResource CustomMouseOverBrushKey}" TargetName="Border"/>
							<Setter Property="Foreground" Value="Black"/>
						</Trigger>
						<Trigger Property="IsFocused" Value="true">
							<Setter Property="Background" Value="{DynamicResource CustomSelectedBackgroundBrushKey}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{StaticResource CustomSelectedBorderBrushKey}"/>
							<Setter Property="BorderThickness" Value="1"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource CustomDisabledForegroundBrushKey}"/>
						</Trigger>
						<Trigger Property="IsKeyboardFocusWithin" Value="true">
							<Setter Property="IsSelected" Value="true" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="CustomListBoxItem2Key" d:IsControlPart="True" TargetType="{x:Type ListBoxItem}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBoxItem}">
					<Grid SnapsToDevicePixels="true">
						<Border x:Name="Border" Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"/>
						<Rectangle x:Name="Indicator" Margin="4"
								   Width="8"
								   HorizontalAlignment="Left"/>
						<ContentPresenter HorizontalAlignment="Stretch"
										  VerticalAlignment="Stretch"
										  Margin="4,0"/>
					</Grid>
					<ControlTemplate.Triggers>

						<!-- IsSelected の SelectedBackgroundBrush を変更してアイテムの選択の色を設定します -->
						<Trigger Property="IsSelected" Value="true">
							<Setter Property="Fill" Value="{DynamicResource AccentColorKey}" TargetName="Indicator"/>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="True"/>
								<Condition Property="IsSelected" Value="False"/>
							</MultiTrigger.Conditions>
							<MultiTrigger.Setters>
								<Setter Property="Fill" Value="{DynamicResource CustomMouseOverBrushKey}" TargetName="Indicator"/>
							</MultiTrigger.Setters>
						</MultiTrigger>
						<Trigger Property="IsFocused" Value="true">
							<Setter Property="Fill" Value="{DynamicResource AccentColorKey}" TargetName="Indicator"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource CustomDisabledForegroundBrushKey}"/>
						</Trigger>
						<Trigger Property="IsKeyboardFocusWithin" Value="true">
							<Setter Property="IsSelected" Value="true" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- コンボボックスのボタン用 -->
	<ControlTemplate x:Key="CustomComboBoxToggleButtonKey" TargetType="{x:Type ToggleButton}">
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition/>
				<ColumnDefinition Width="20"/>
			</Grid.ColumnDefinitions>
			<Rectangle x:Name="Rectangle" Grid.ColumnSpan="2"
					   HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
					   Width="Auto" Height="Auto" RadiusX="0" RadiusY="0"
					   Fill="{DynamicResource CustomLightBrushKey}" Stroke="{DynamicResource CustomNormalBorderBrushKey}"/>
			<!-- 右側に配置する矩形は、マウスオーバー・クリックをすると、背景色が変化します。 -->
			<Rectangle x:Name="rectangle" Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
					   Width="Auto" Height="Auto" RadiusX="0" RadiusY="0"
					   Fill="{DynamicResource CustomLightBrushKey}" Stroke="{DynamicResource CustomNormalBorderBrushKey}"/>
			<!-- コンボボックスのボタンに表示するテキスト : ▽ -->
			<Path x:Name="Arrow" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center"
				  Data="M 0 0 H 8 L 4 4 Z" 
				  Fill="{DynamicResource CustomNormalBorderBrushKey}" Stroke="{DynamicResource CustomNormalBorderBrushKey}"/>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="Fill" TargetName="Rectangle" Value="{DynamicResource CustomMouseOverBrushKey}"/>
			</Trigger>
			<!-- IsCheckedがtrueの時、コンボボックスのポップアップが開いています。 -->
			<Trigger Property="IsChecked" Value="true">
				<Setter Property="Fill" TargetName="Rectangle" Value="{DynamicResource CustomPressedBrushKey}"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Foreground" Value="{DynamicResource CustomDisabledForegroundBrushKey}"/>
				<Setter Property="Fill" TargetName="Rectangle" Value="{DynamicResource CustomDisabledBackgroundBrushKey}"/>
				<Setter Property="Stroke" TargetName="Rectangle" Value="{DynamicResource CustomDisabledBorderBrushKey}"/>
				<Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource CustomDisabledBackgroundBrushKey}"/>
				<Setter Property="Stroke" TargetName="rectangle" Value="{DynamicResource CustomDisabledBorderBrushKey}"/>
				<Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource CustomDisabledBackgroundBrushKey}"/>
				<Setter Property="Stroke" TargetName="Arrow" Value="{DynamicResource CustomDisabledBorderBrushKey}"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- コンボボックスのエディットコントロール用 -->
	<!-- コンボボックスをドロップダウンボックスとして使用する場合、このコントロールは無効です。 -->
	<ControlTemplate x:Key="CustomComboBoxTextBoxKey" TargetType="{x:Type TextBox}">
		<!-- これは PART_ContentHost と名前を付ける必要があります -->
		<Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}"/>
	</ControlTemplate>

	<!-- コンボボックス用 -->
	<Style x:Key="CustomComboBoxKey" TargetType="{x:Type ComboBox}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="FocusVisualStyle" Value="{DynamicResource CustomItemFocusVisualKey}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBox}">
					<Grid>
						<!-- ToggleButton は、IsDropDownOpen を切り替えるため ComboBox 自身にデータ バインドされています  -->
						<ToggleButton Grid.Column="2" Template="{DynamicResource CustomComboBoxToggleButtonKey}"
									  x:Name="ToggleButton" Focusable="false"
									  IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
						<ContentPresenter HorizontalAlignment="Left"
										  Margin="3,3,23,3" x:Name="ContentSite"
										  VerticalAlignment="Center"
										  Content="{TemplateBinding SelectionBoxItem}"
										  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
										  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
										  IsHitTestVisible="False"/>

						<!-- TextBox は PART_EditableTextBox と名前を付ける必要があります。それ以外の名前では、ComboBox で認識されません -->
						<TextBox Visibility="Hidden" Template="{DynamicResource CustomComboBoxTextBoxKey}"
								 HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="PART_EditableTextBox" Style="{x:Null}"
								 VerticalAlignment="Center" Focusable="True" Background="Transparent" IsReadOnly="{TemplateBinding IsReadOnly}"/>

						<!-- Popup には ComboBox のアイテム一覧が表示されます。IsOpen は、ComboBoxToggleButton を介して切り替えられる IsDropDownOpen にデータ バインドされています  -->
						<Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
							<Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
								<Border x:Name="DropDownBorder" Background="{DynamicResource CustomLightBrushKey}" BorderBrush="{DynamicResource CustomNormalBorderBrushKey}" BorderThickness="1"/>
								<ScrollViewer Margin="4,6,4,6" Style="{DynamicResource CustomScrollViewerKey}" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">

									<!-- StackPanel は IsItemsHost を True に設定することで子の表示に使用されます -->
									<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>

								</ScrollViewer>
							</Grid>
						</Popup>
					</Grid>
					<ControlTemplate.Triggers>
						<!-- 項目が空の場合は DropDown に最小サイズが適用されます -->
						<Trigger Property="HasItems" Value="false">
							<Setter Property="MinHeight" Value="95" TargetName="DropDownBorder"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource CustomDisabledForegroundBrushKey}"/>
						</Trigger>
						<Trigger Property="IsGrouping" Value="true">
							<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
						</Trigger>
						<Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
							<Setter Property="CornerRadius" Value="4" TargetName="DropDownBorder"/>
							<Setter Property="Margin" Value="0,2,0,0" TargetName="DropDownBorder"/>
						</Trigger>
						<!-- コンボボックスのエディットコントロールが有効の時 -->
						<Trigger Property="IsEditable" Value="true">
							<Setter Property="IsTabStop" Value="false"/>
							<Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox"/>
							<Setter Property="Visibility" Value="Hidden" TargetName="ContentSite"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- コンボボックスの項目用 -->
	<Style x:Key="CustomComboBoxItemKey" d:IsControlPart="True" TargetType="{x:Type ComboBoxItem}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBoxItem}">
					<Grid SnapsToDevicePixels="true">
						<Border x:Name="Border" 
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"/>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										  Margin="4,0"/>
					</Grid>
					<ControlTemplate.Triggers>

						<!-- IsHighlighted の SelectedBackgroundBrush を変更してアイテムの選択の色を設定します -->
						<Trigger Property="IsHighlighted" Value="true">
							<Setter Property="Background" Value="{DynamicResource CustomSelectedBackgroundBrushKey}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{StaticResource CustomSelectedBorderBrushKey}" TargetName="Border"/>
							<Setter Property="BorderThickness" Value="1" TargetName="Border"/>
						</Trigger>

						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource CustomDisabledForegroundBrushKey}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- テキストボックス用 -->
	<Style x:Key="CustomTextBoxKey" TargetType="{x:Type TextBox}">
		<Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
		<Setter Property="FocusVisualStyle" Value="{DynamicResource CustomItemFocusVisualKey}"/>
		<Setter Property="AllowDrop" Value="true"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<Grid>
						<Border x:Name="Border" Background="{DynamicResource WindowBackgroundBrushKey}" BorderBrush="{DynamicResource CustomSolidBorderBrushKey}" BorderThickness="1" Padding="2" CornerRadius="2">

							<!-- 実装により、Content が ScrollViewer に配置されます。コントロールが動作するには、PART_ContentHost と名前を付ける必要があります -->
							<ScrollViewer Margin="0" x:Name="PART_ContentHost" Style="{DynamicResource CustomScrollViewerKey}" Background="{TemplateBinding Background}"/>

						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Background" Value="{DynamicResource CustomDisabledBackgroundBrushKey}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{DynamicResource CustomDisabledBackgroundBrushKey}" TargetName="Border"/>
							<Setter Property="Foreground" Value="{DynamicResource CustomDisabledForegroundBrushKey}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ラベル用 -->
	<Style x:Key="CustomLabelKey" TargetType="{x:Type Label}">
		<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
		<Setter Property="VerticalContentAlignment" Value="Stretch"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Label}">
					<Grid>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false"/>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- テキストブロック用 -->
	<Style x:Key="CustomTextBlockKey" TargetType="{x:Type TextBlock}">
		<Setter Property="HorizontalAlignment" Value="Stretch"/>
		<Setter Property="VerticalAlignment" Value="Stretch"/>
		<!-- TextBlockにはTemplateプロパティはありません。 -->
	</Style>

	<!-- タブコントロール用
		 制限 : タブをこのコントロールの上部にのみ表示することができます。これを変更するには、TabPanel を再配置します-->
	<Style x:Key="CustomTabControlKey" TargetType="{x:Type TabControl}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabControl}">
					<Grid KeyboardNavigation.TabNavigation="Local">
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="*"/>
						</Grid.RowDefinitions>

						<!-- TabPanel は選択されたときに TabItems の折り返しと再並べ替えを可能にするレイアウト コンテナーです
							 IsItemsHost = True とマークされているため、実装はこのコントロールの使用を認識しています -->
						<TabPanel x:Name="HeaderPanel" Grid.Row="0" Margin="0,0,4,-1"
								  Background="Transparent" IsItemsHost="True" Panel.ZIndex="1"
								  KeyboardNavigation.TabIndex="1"/>

						<Border Grid.Row="1"
								x:Name="Border"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2"
								KeyboardNavigation.DirectionalNavigation="Contained"
								KeyboardNavigation.TabNavigation="Local"
								KeyboardNavigation.TabIndex="2">

							<!-- 実装はコンテンツを切り替えます。このコントロールは PART_SelectedContentHost と名前を付ける必要があります -->
							<ContentPresenter Margin="4" x:Name="PART_SelectedContentHost"
								ContentSource="SelectedContent"/>

						</Border>
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Foreground" Value="{DynamicResource CustomDisabledForegroundBrushKey}"/>
							<Setter Property="BorderBrush" Value="{DynamicResource CustomDisabledBorderBrushKey}" TargetName="Border"/>
						</Trigger>
					</ControlTemplate.Triggers>

				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- タブの項目用 -->
	<Style x:Key="CustomTabItemKey" d:IsControlPart="True" TargetType="{x:Type TabItem}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabItem}">
					<Grid>
						<Border x:Name="Border" Margin="0,0,-4,0"
								Background="Transparent"
								BorderBrush="{x:Null}"
								BorderThickness="0,0,0,3">
							<ContentPresenter x:Name="ContentSite" Margin="8,2,8,2"
											  HorizontalAlignment="Center"
											  VerticalAlignment="Center"
											  RecognizesAccessKey="True"
											  ContentSource="Header"/>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="True"/>
						<!-- タブが選択されている時 -->
						<Trigger Property="IsSelected" Value="True">
							<Setter Property="Background" Value="{DynamicResource CustomLightBrushKey}" TargetName="Border"/>
							<Setter Property="TextBlock.Foreground" Value="{DynamicResource AccentColorKey}" TargetName="ContentSite"/>
							<Setter Property="BorderBrush" Value="{DynamicResource AccentColorKey}" TargetName="Border"/>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="True"/>
								<Condition Property="IsSelected" Value="False"/>
							</MultiTrigger.Conditions>
							<MultiTrigger.Setters>
								<Setter Property="BorderBrush" Value="{DynamicResource CustomMouseOverBrushKey}" TargetName="Border"/>
							</MultiTrigger.Setters>
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{x:Null}" TargetName="Border"/>
							<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ラジオボタンのフォーカス用 -->
	<Style x:Key="CustomRadioButtonFocusVisualKey">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Border>
						<Rectangle Margin="15,0,0,0" Stroke="DodgerBlue" StrokeThickness="1"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ラジオボタン用 -->
	<Style x:Key="CustomRadioButtonKey" TargetType="{x:Type RadioButton}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="FocusVisualStyle" Value="{DynamicResource CustomRadioButtonFocusVisualKey}"/>
		<Setter Property="Padding" Value="10,0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RadioButton}">

					<!-- BulletDecorator はチェック マークとコンテンツの基準線を揃えるために使用されます -->
					<BulletDecorator Background="Transparent">
						<BulletDecorator.Bullet>
							<Grid Width="13" Height="13">
								<!-- ラジオボタンのチェックマークを収める図形 -->
								<Ellipse x:Name="Ellipse_Border" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
								<!-- ラジオボタンのチェックマーク -->
								<Ellipse Margin="3" x:Name="CheckMark" Fill="{DynamicResource GlyphBrushKey}"/>
							</Grid>
						</BulletDecorator.Bullet>
						<!-- ラジオボタンのチェックマークの隣に表示するコンテンツ -->
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
					</BulletDecorator>

					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="false">
							<Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Fill" Value="{DynamicResource CustomMouseOverBrushKey}" TargetName="Ellipse_Border"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Fill" Value="{DynamicResource CustomPressedBrushKey}" TargetName="Ellipse_Border"/>
							<Setter Property="Stroke" Value="{DynamicResource GlyphBrushKey}" TargetName="Ellipse_Border"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Fill" Value="{DynamicResource CustomDisabledBackgroundBrushKey}" TargetName="Ellipse_Border"/>
							<Setter Property="Stroke" Value="#40000000" TargetName="Ellipse_Border"/>
							<Setter Property="Foreground" Value="#80000000"/>
						</Trigger>

					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- チェックボックス用 -->
	<Style x:Key="CustomCheckBoxKey" TargetType="{x:Type CheckBox}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="FocusVisualStyle" Value="{DynamicResource CustomRadioButtonFocusVisualKey}"/>
		<Setter Property="Padding" Value="10,0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CheckBox}">

					<!-- BulletDecorator はチェック マークとコンテンツの基準線を揃えるために使用されます -->
					<BulletDecorator Background="Transparent">
						<BulletDecorator.Bullet>
							<Border x:Name="Border"
									Width="13"
									Height="13"
									CornerRadius="0"
									BorderThickness="1"
									Background="{TemplateBinding Background}"
									BorderBrush="{TemplateBinding BorderBrush}">
								<Grid>
									<!-- チェックマーク（レ点） -->
									<Path x:Name="CheckMark"
										  Visibility="Collapsed"
										  Width="7" Height="7"
										  SnapsToDevicePixels="False"
										  StrokeThickness="2" Stroke="{DynamicResource GlyphBrushKey}"
										  Data="M 0 3 L 3 7 L 7 0"/>
									<!-- チェックマーク（ 不確定 ） -->
									<Rectangle x:Name="InderminateMark"
											   Visibility="Collapsed"
											   Width="7" Height="7"
											   SnapsToDevicePixels="False"
											   StrokeThickness="2"
											   Fill="{DynamicResource GlyphBrushKey}"/>
								</Grid>
							</Border>

						</BulletDecorator.Bullet>
						
						<!-- チェックボックスの隣に表示するコンテンツ -->
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										  RecognizesAccessKey="True"/>
					</BulletDecorator>

					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="true">
							<Setter Property="Visibility" Value="Visible" TargetName="CheckMark"/>
						</Trigger>
						<!-- 不確定状態の時 -->
						<Trigger Property="IsChecked" Value="{x:Null}">
							<Setter Property="Visibility" Value="Visible" TargetName="InderminateMark"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="{DynamicResource CustomMouseOverBrushKey}" TargetName="Border"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" Value="{DynamicResource CustomPressedBrushKey}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{DynamicResource GlyphBrushKey}" TargetName="Border"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="{DynamicResource CustomDisabledBackgroundBrushKey}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="#40000000" TargetName="Border"/>
							<Setter Property="Foreground" Value="#80000000"/>
						</Trigger>

					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- プログレスバー用 -->
	<Style x:Key="CustomProgressBarKey" TargetType="{x:Type ProgressBar}">
		<Setter Property="Foreground" Value="{DynamicResource CustomSelectedBackgroundBrushKey}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ProgressBar}">
					<Grid x:Name="TemplateRoot">
						<!-- この Border 枠線はトラックです。これは PART_Track と名前を付ける必要があります。 -->
						<Border x:Name="PART_Track" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1"/>
						<!-- この Decorator は進行状況を表示します。コントロールが動作するには、PART_Indicator と名前を付ける必要があります -->
						<Decorator x:Name="PART_Indicator" Margin="1" HorizontalAlignment="Left">
							<Grid x:Name="Foreground">
								<Border x:Name="Indicator" Background="{TemplateBinding Foreground}"/>
								<Grid x:Name="IndeterminateIndicator" ClipToBounds="True"
									  Visibility="Collapsed">
									<!-- このBorder -->
									<Border Name="PART_GlowRect" Width="100" Margin="-100,0,0,0"
											HorizontalAlignment="Left" Background="{TemplateBinding Foreground}"/>
								</Grid>
							</Grid>
						</Decorator>
					</Grid>
					<ControlTemplate.Triggers>
						<!-- 垂直方向の時 -->
						<Trigger Property="Orientation" Value="Vertical">
							<Setter TargetName="TemplateRoot" Property="LayoutTransform">
								<Setter.Value>
									<RotateTransform Angle="-90"/>
								</Setter.Value>
							</Setter>
						</Trigger>
						<!-- 進行状況が予測不可能な時 -->
						<Trigger Property="IsIndeterminate" Value="True">
							<Setter TargetName="Indicator" Property="Visibility" Value="Collapsed"/>
							<Setter TargetName="IndeterminateIndicator" Property="Visibility" Value="Visible"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- アクセントカラーのプログレスバーです。 -->
	<Style x:Key="CustomProgressBarAccentColorKey" TargetType="{x:Type ProgressBar}">
		<Setter Property="Foreground" Value="{StaticResource AccentColorKey}"/>
		<Setter Property="Background" Value="{StaticResource CustomNormalBrushKey}"/>
		<Setter Property="BorderBrush" Value="{StaticResource CustomNormalLightBrushKey}"/>
		<Setter Property="BorderThickness" Value="1"/>
	</Style>

	<!-- モノトーン色のプログレスバーです。 -->
	<Style x:Key="CustomProgressBarMonotoneKey" TargetType="{x:Type ProgressBar}">
		<Setter Property="Foreground" Value="White"/>
		<Setter Property="Background" Value="{StaticResource MainWindowBorderBrushKey}"/>
		<Setter Property="BorderBrush" Value="White"/>
		<Setter Property="BorderThickness" Value="1"/>
	</Style>


</ResourceDictionary>